import asyncio
from datetime import datetime, time
from aiogram import Bot
from data_base.dao import get_difficult_notes
from keyboards.note_kb import main_note_kb

class NotificationManager:
    def __init__(self, bot: Bot):
        self.bot = bot
        self.active_users = set()  # user_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
        self.is_running = False

    def add_user(self, user_id: int):
        """–î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
        self.active_users.add(user_id)

    def remove_user(self, user_id: int):
        """–£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
        self.active_users.discard(user_id)

    def is_user_active(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        return user_id in self.active_users

    async def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
        if self.is_running:
            return
        
        self.is_running = True
        asyncio.create_task(self._notification_worker())

    async def _notification_worker(self):
        """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
        while self.is_running:
            try:
                now = datetime.now().time()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, 20:00 –ª–∏ —Å–µ–π—á–∞—Å (—Å –¥–æ–ø—É—Å–∫–æ–º ¬±1 –º–∏–Ω—É—Ç–∞)
                target_time = time(20, 0)
                current_time = time(now.hour, now.minute)
                
                if (target_time.hour == current_time.hour and 
                    abs(target_time.minute - current_time.minute) <= 1):
                    
                    await self._send_difficult_notes_notifications()
                    
                    # –ñ–¥–µ–º 2 –º–∏–Ω—É—Ç—ã, —á—Ç–æ–±—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ
                    await asyncio.sleep(120)
                else:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                    await asyncio.sleep(60)
                    
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –≤ notification_worker: {e}")
                await asyncio.sleep(60)

    async def _send_difficult_notes_notifications(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–ª–æ–∂–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–∫–∞—Ö."""
        for user_id in list(self.active_users):
            try:
                difficult_notes = await get_difficult_notes(user_id=user_id)
                
                if difficult_notes:
                    await self.bot.send_message(
                        user_id,
                        f"üìö –£ –≤–∞—Å –Ω–∞–∫–æ–ø–∏–ª–æ—Å—å {len(difficult_notes)} –∫–∞—Ä—Ç–æ—á–µ–∫, "
                        f"–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–ø–æ–º–∏–Ω–∞—é—Ç—Å—è —Ö—É–∂–µ –≤—Å–µ–≥–æ.\n\n"
                        f"–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª '–≠–∫–∑–∞–º–µ–Ω' ‚Üí '–ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–ª–æ–∂–Ω—ã–µ' "
                        f"–∏ –∏–∑—É—á–∏—Ç–µ –∏—Ö –ø–æ–≤—Ç–æ—Ä–Ω–æ.",
                        reply_markup=main_note_kb()
                    )
                    
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
notification_manager = None

def setup_notifications(bot: Bot):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    global notification_manager
    notification_manager = NotificationManager(bot)
    return notification_manager