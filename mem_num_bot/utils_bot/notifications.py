import asyncio
from datetime import datetime, time
from aiogram import Bot
from data_base.dao import get_difficult_notes
from keyboards.note_kb import main_note_kb

class NotificationManager:
    def __init__(self, bot: Bot):
        self.bot = bot
        self.active_users = set()  # user_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
        self.user_notification_times = {}  # user_id -> –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ "HH:MM"
        self.is_running = False

    def add_user(self, user_id: int, notification_time: str = "20:00"):
        """–î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
        self.active_users.add(user_id)
        if user_id not in self.user_notification_times:
            self.user_notification_times[user_id] = notification_time

    def remove_user(self, user_id: int):
        """–£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
        self.active_users.discard(user_id)

    def set_user_notification_time(self, user_id: int, time_str: str):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        self.user_notification_times[user_id] = time_str
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤—Ä–µ–º–µ–Ω–∏
        self.active_users.add(user_id)

    def get_user_notification_time(self, user_id: int) -> str:
        """–ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        return self.user_notification_times.get(user_id, "20:00")

    def is_user_active(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        return user_id in self.active_users

    async def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
        if self.is_running:
            return
        
        self.is_running = True
        asyncio.create_task(self._notification_worker())

    async def _notification_worker(self):
        """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
        while self.is_running:
            try:
                now = datetime.now()
                current_time_str = now.strftime("%H:%M")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ–≥–æ –≤—Ä–µ–º—è
                for user_id in list(self.active_users):
                    user_time = self.user_notification_times.get(user_id, "20:00")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ (—Å –¥–æ–ø—É—Å–∫–æ–º ¬±1 –º–∏–Ω—É—Ç–∞)
                    if self._is_time_match(current_time_str, user_time):
                        await self._send_difficult_notes_notifications(user_id)
                
                # –ñ–¥–µ–º 60 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                await asyncio.sleep(60)
                    
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –≤ notification_worker: {e}")
                await asyncio.sleep(60)

    def _is_time_match(self, current_time: str, target_time: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å —Ü–µ–ª–µ–≤—ã–º (—Å –¥–æ–ø—É—Å–∫–æ–º ¬±1 –º–∏–Ω—É—Ç–∞)."""
        try:
            current = datetime.strptime(current_time, "%H:%M")
            target = datetime.strptime(target_time, "%H:%M")
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É –≤ –º–∏–Ω—É—Ç–∞—Ö
            time_diff = abs((current - target).total_seconds() / 60)
            
            return time_diff <= 1
        except ValueError:
            return False

    async def _send_difficult_notes_notifications(self, user_id: int):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–ª–æ–∂–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–∫–∞—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
        try:
            difficult_notes = await get_difficult_notes(user_id=user_id)
            
            if difficult_notes:
                await self.bot.send_message(
                    user_id,
                    f"üìö –£ –≤–∞—Å –Ω–∞–∫–æ–ø–∏–ª–æ—Å—å {len(difficult_notes)} –∫–∞—Ä—Ç–æ—á–µ–∫, "
                    f"–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–ø–æ–º–∏–Ω–∞—é—Ç—Å—è —Ö—É–∂–µ –≤—Å–µ–≥–æ.\n\n"
                    f"–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª '–≠–∫–∑–∞–º–µ–Ω' ‚Üí '–ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–ª–æ–∂–Ω—ã–µ' "
                    f"–∏ –∏–∑—É—á–∏—Ç–µ –∏—Ö –ø–æ–≤—Ç–æ—Ä–Ω–æ.",
                    reply_markup=main_note_kb()
                )
                print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –æ {len(difficult_notes)} —Å–ª–æ–∂–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–∫–∞—Ö")
            else:
                print(f"‚ÑπÔ∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ—Ç —Å–ª–æ–∂–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
                
        except Exception as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
notification_manager = None

def setup_notifications(bot: Bot):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    global notification_manager
    notification_manager = NotificationManager(bot)
    return notification_manager