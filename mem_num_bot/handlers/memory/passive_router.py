from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import ReplyKeyboardBuilder
import asyncio
import random

from data_base.dao import get_all_categories, get_notes_by_categories
from keyboards.passive_kb import create_passive_categories_keyboard, create_interval_keyboard
from create_bot import bot
from keyboards.note_kb import main_note_kb
from keyboards.mem_kb import main_mem_kb
from utils_bot.utils import send_message_user

passive_router = Router()

# –•—Ä–∞–Ω–∏–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–∞—Å—Å–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏
active_passive_sessions = {}

class PassiveStates(StatesGroup):
    choosing_categories = State()
    choosing_interval = State()
    in_session = State()


@passive_router.message(F.text == "üìñ –ü–∞—Å—Å–∏–≤–Ω–æ")
async def start_passive(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è."""
    await state.clear()
    
    categories = await get_all_categories(user_id=message.from_user.id)
    if not categories:
        await message.answer(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è.",
            reply_mup=main_note_kb()
        )
        return
    
    await message.answer(
        "üìñ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è:\n\n"
        "‚Ä¢ –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π\n"
        "‚Ä¢ –ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏' –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –ø–æ –≤—Å–µ–º –∑–∞–º–µ—Ç–∫–∞–º",
        reply_markup=create_passive_categories_keyboard(categories)
    )
    await state.set_state(PassiveStates.choosing_categories)


@passive_router.callback_query(PassiveStates.choosing_categories, F.data.startswith('passive_category_'))
async def process_passive_category_selection(call: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è."""
    data = await state.get_data()
    selected_categories = data.get('selected_categories', [])
    
    if call.data == 'passive_category_all':
        # –í—ã–±—Ä–∞–Ω—ã –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        categories = await get_all_categories(user_id=call.from_user.id)
        category_ids = [cat['id'] for cat in categories]
        await state.update_data(selected_categories=category_ids)
        await show_interval_selection(call, state)
        return
    
    category_id = int(call.data.replace('passive_category_', ''))
    
    if category_id in selected_categories:
        selected_categories.remove(category_id)
    else:
        selected_categories.append(category_id)
    
    await state.update_data(selected_categories=selected_categories)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    categories = await get_all_categories(user_id=call.from_user.id)
    await call.message.edit_reply_markup(
        reply_markup=create_passive_categories_keyboard(categories, selected_categories)
    )
    await call.answer()


@passive_router.callback_query(PassiveStates.choosing_categories, F.data == 'start_passive')
async def start_passive_with_selected(call: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏."""
    data = await state.get_data()
    selected_categories = data.get('selected_categories', [])
    
    if not selected_categories:
        await call.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é!", show_alert=True)
        return
    
    await show_interval_selection(call, state)


async def show_interval_selection(call: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑ –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞."""
    await call.message.answer(
        "‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞—Ä—Ç–æ—á–µ–∫:",
        reply_markup=create_interval_keyboard()
    )
    await state.set_state(PassiveStates.choosing_interval)


@passive_router.callback_query(PassiveStates.choosing_interval, F.data.startswith('interval_'))
async def process_interval_selection(call: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞."""
    interval_map = {
        'interval_30min': 1800,  # 30 –º–∏–Ω—É—Ç
        'interval_1hour': 3600,  # 1 —á–∞—Å
        'interval_2hours': 7200,  # 2 —á–∞—Å–∞
        'interval_3hours': 10800  # 3 —á–∞—Å–∞
    }
    
    interval_key = call.data
    interval_seconds = interval_map.get(interval_key)
    
    if not interval_seconds:
        await call.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    data = await state.get_data()
    selected_categories = data.get('selected_categories', [])
    
    await start_passive_session(call, state, selected_categories, interval_seconds)


async def start_passive_session(call: CallbackQuery, state: FSMContext, category_ids: list, interval_seconds: int):
    """–ó–∞–ø—É—Å–∫ –ø–∞—Å—Å–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏."""
    user_id = call.from_user.id
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å–µ—Å—Å–∏—é, –µ—Å–ª–∏ –µ—Å—Ç—å
    if user_id in active_passive_sessions:
        active_passive_sessions[user_id]['active'] = False
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
    notes = await get_notes_by_categories(
        user_id=user_id,
        category_ids=category_ids
    )
    
    if not notes:
        await call.message.answer(
            "‚ùå –í –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫!",
            reply_markup=main_note_kb()
        )
        await state.clear()
        return
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
    active_passive_sessions[user_id] = {
        'active': True,
        'notes': notes,
        'interval': interval_seconds,
        'last_message_id': None,
        'current_note': None
    }
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—É—Å–∫–µ
    interval_text = {
        1800: "30 –º–∏–Ω—É—Ç",
        3600: "1 —á–∞—Å", 
        7200: "2 —á–∞—Å–∞",
        10800: "3 —á–∞—Å–∞"
    }.get(interval_seconds, f"{interval_seconds//3600} —á–∞—Å–∞")
    
    await call.message.answer(
        f"üìñ –ü–∞—Å—Å–∏–≤–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ!\n"
        f"‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {len(category_ids)}\n"
        f"‚Ä¢ –ö–∞—Ä—Ç–æ—á–µ–∫: {len(notes)}\n"
        f"‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {interval_text}\n\n"
        f"–Ø –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º.\n"
        f"–í—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç.",
        reply_markup=create_stop_passive_keyboard()
    )
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É —Å—Ä–∞–∑—É
    await send_random_passive_card(user_id)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
    asyncio.create_task(passive_worker(user_id))
    
    await state.set_state(PassiveStates.in_session)


def create_stop_passive_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è."""
    builder = ReplyKeyboardBuilder()
    builder.button(text="‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Å—Å–∏–≤–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ")
    return builder.as_markup(resize_keyboard=True)


async def passive_worker(user_id: int):
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é."""
    while user_id in active_passive_sessions and active_passive_sessions[user_id]['active']:
        try:
            session = active_passive_sessions[user_id]
            interval = session.get('interval', 3600)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 —á–∞—Å
            
            # –ñ–¥–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
            await asyncio.sleep(interval)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ –µ—â–µ —Å–µ—Å—Å–∏—è
            if user_id in active_passive_sessions and active_passive_sessions[user_id]['active']:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª)
                if not session.get('current_note'):
                    await send_random_passive_card(user_id)
                    
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ passive_worker: {e}")
            break


async def send_random_passive_card(user_id: int):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    if user_id not in active_passive_sessions:
        return
    
    session = active_passive_sessions[user_id]
    if not session['active']:
        return
    
    notes = session['notes']
    
    if not notes:
        return
    
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É
    random_note = random.choice(notes)
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
    if session.get('last_message_id'):
        try:
            await bot.delete_message(user_id, session['last_message_id'])
        except:
            pass
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
    message = await bot.send_message(
        user_id,
        f"üìñ –ü–∞—Å—Å–∏–≤–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ\n\n"
        f"{random_note.get('content_text', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n\n"
        f"–ù–∞–ø–∏—à–∏ –æ–ø–∏—Å–∞–Ω–∏–µ —ç—Ç–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏:",
        reply_markup=create_stop_passive_keyboard()
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–∞
    session['current_note'] = random_note
    session['last_message_id'] = message.message_id


@passive_router.message(PassiveStates.in_session, F.text == "‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Å—Å–∏–≤–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ")
async def stop_passive_learning(message: Message, state: FSMContext):
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è."""
    user_id = message.from_user.id
    
    if user_id in active_passive_sessions:
        active_passive_sessions[user_id]['active'] = False
        del active_passive_sessions[user_id]
    
    await message.answer(
        "‚èπ –ü–∞—Å—Å–∏–≤–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!",
        reply_markup=main_mem_kb()
    )
    await state.clear()


@passive_router.message(PassiveStates.in_session)
async def check_passive_answer(message: Message, state: FSMContext):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ –≤ –ø–∞—Å—Å–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ."""
    user_id = message.from_user.id
    
    if user_id not in active_passive_sessions:
        return
    
    session = active_passive_sessions[user_id]
    if not session.get('current_note'):
        return
    
    current_note = session['current_note']
    user_answer = message.text.strip().lower()
    correct_description = (current_note.get('description') or '').strip().lower()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
    is_correct = user_answer == correct_description
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if is_correct:
        await message.answer("‚úÖ –í–µ—Ä–Ω–æ!")
    else:
        await message.answer("‚ùå –ù–µ –≤–µ—Ä–Ω–æ!")
    
    # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –ø–æ–ª–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
    await asyncio.sleep(0.8)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
    full_card_text = (
        f"üìñ –ü–æ–ª–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞:\n\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {current_note.get('category_name', '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')}\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {current_note.get('content_text', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {current_note.get('description', '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}"
    )
    
    await send_message_user(
        bot=bot,
        content_type=current_note.get('content_type'),
        content_text=full_card_text,
        user_id=user_id,
        file_id=current_note.get('file_id'),
        kb=create_stop_passive_keyboard()
    )
    
    # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–∞—Ä—Ç–æ—á–∫—É –∏–∑ —Å–µ—Å—Å–∏–∏
    session['current_note'] = None