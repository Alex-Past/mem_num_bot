import asyncio
import random

from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery

from data_base.dao import (
    get_all_categories,
    get_difficult_notes,
    get_note_by_id, 
    get_notes_by_categories, 
    update_note_stats
)
from keyboards.exam_kb import (
    create_categories_keyboard, 
    create_exam_control_keyboard,
    create_exam_main_keyboard,
    create_stop_exam_keyboard
)
from create_bot import bot
from keyboards.note_kb import main_note_kb
from keyboards.mem_kb import main_mem_kb
from utils_bot.utils import send_message_user

exam_router = Router()


class ExamStates(StatesGroup):
    choosing_categories = State()
    in_exam = State()


@exam_router.message(F.text == 'üìö –≠–∫–∑–∞–º–µ–Ω')
async def start_exam(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —ç–∫–∑–∞–º–µ–Ω–∞ - –≤—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞."""
    await state.clear()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–ª–æ–∂–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
    difficult_notes = await get_difficult_notes(user_id=message.from_user.id)
    has_difficult = len(difficult_notes) > 0
    
    text = "üìö –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —ç–∫–∑–∞–º–µ–Ω–∞:"
    if has_difficult:
        text += f"\n\nüéØ –£ –≤–∞—Å {len(difficult_notes)} —Å–ª–æ–∂–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è"
    
    await message.answer(
        text,
        reply_markup=create_exam_main_keyboard(has_difficult_notes=has_difficult)
    )

@exam_router.callback_query(F.data == 'difficult_notes')
async def start_difficult_exam(call: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —ç–∫–∑–∞–º–µ–Ω–∞ –ø–æ —Å–ª–æ–∂–Ω—ã–º –∫–∞—Ä—Ç–æ—á–∫–∞–º."""
    difficult_notes = await get_difficult_notes(user_id=call.from_user.id)
    
    if not difficult_notes:
        await call.answer("‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–ª–æ–∂–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫!", show_alert=True)
        return
    
    # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —Å–ª–æ–∂–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
    import random
    random.shuffle(difficult_notes)
    
    await state.update_data(
        exam_notes=difficult_notes,
        current_note_index=0,
        correct_answers=0,
        wrong_answers=0,
        wrong_notes=[],
        exam_mode="difficult"  # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É —Ä–µ–∂–∏–º–∞
    )
    
    await call.message.answer(
        f"üéØ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —Å–ª–æ–∂–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫!\n"
        f"–í—Å–µ–≥–æ –∫–∞—Ä—Ç–æ—á–µ–∫: {len(difficult_notes)}\n\n"
        f"–°—Ç–∞—Ä–∞–π—Ç–µ—Å—å –∑–∞–ø–æ–º–Ω–∏—Ç—å —ç—Ç–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ - –æ–Ω–∏ —Ç—Ä–µ–±—É—é—Ç –±–æ–ª—å—à–µ –≤–Ω–∏–º–∞–Ω–∏—è!",
        reply_markup=create_stop_exam_keyboard()
    )
    
    await show_next_exam_question(call.message, state)
    await state.set_state(ExamStates.in_exam)


@exam_router.callback_query(F.data == 'select_categories')
async def select_categories_mode(call: CallbackQuery, state: FSMContext):
    """–í—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    categories = await get_all_categories(user_id=call.from_user.id)
    if not categories:
        await call.message.answer(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —ç–∫–∑–∞–º–µ–Ω–∞.",
            reply_markup=main_note_kb()
        )
        return
    
    await call.message.answer(
        "üìö –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —ç–∫–∑–∞–º–µ–Ω–∞:",
        reply_markup=create_categories_keyboard(categories)
    )
    await state.set_state(ExamStates.choosing_categories)


@exam_router.callback_query(ExamStates.choosing_categories, F.data.startswith('exam_category_'))
async def process_category_selection(call: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π."""
    data = await state.get_data()
    selected_categories = data.get('selected_categories', [])
    
    if call.data == 'exam_category_all':
        # –í—ã–±—Ä–∞–Ω—ã –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        categories = await get_all_categories(user_id=call.from_user.id)
        category_ids = [cat['id'] for cat in categories]
        await state.update_data(selected_categories=category_ids)
        await start_exam_session(call, state, category_ids)
        return
    
    category_id = int(call.data.replace('exam_category_', ''))
    
    if category_id in selected_categories:
        selected_categories.remove(category_id)
    else:
        selected_categories.append(category_id)
    
    await state.update_data(selected_categories=selected_categories)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    categories = await get_all_categories(user_id=call.from_user.id)
    await call.message.edit_reply_markup(
        reply_markup=create_categories_keyboard(categories, selected_categories)
    )
    await call.answer()


@exam_router.callback_query(ExamStates.choosing_categories, F.data == 'start_exam')
async def start_exam_with_selected(call: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —ç–∫–∑–∞–º–µ–Ω–∞ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏."""
    data = await state.get_data()
    selected_categories = data.get('selected_categories', [])
    
    if not selected_categories:
        await call.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é!", show_alert=True)
        return
    
    await start_exam_session(call, state, selected_categories)


async def start_exam_session(call: CallbackQuery, state: FSMContext, category_ids: list):
    """–ó–∞–ø—É—Å–∫ —Å–µ—Å—Å–∏–∏ —ç–∫–∑–∞–º–µ–Ω–∞."""
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è —ç–∫–∑–∞–º–µ–Ω–∞
    notes = await get_notes_by_categories(
        user_id=call.from_user.id,
        category_ids=category_ids
    )
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–º–µ—Ç–∫–∏ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
    exam_notes = [note for note in notes if note.get('description')]
    
    if not exam_notes:
        await call.message.answer(
            "‚ùå –í –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –¥–ª—è —ç–∫–∑–∞–º–µ–Ω–∞!",
            reply_markup=main_note_kb()
        )
        await state.clear()
        return
    
    # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∑–∞–º–µ—Ç–∫–∏
    random.shuffle(exam_notes)
    
    await state.update_data(
        exam_notes=exam_notes,
        current_note_index=0,
        correct_answers=0,
        wrong_answers=0,
        wrong_notes=[]
    )
    
    await call.message.answer(
        f"üìö –≠–∫–∑–∞–º–µ–Ω –Ω–∞—á–∞–ª—Å—è!\n"
        f"–í—Å–µ–≥–æ –∫–∞—Ä—Ç–æ—á–µ–∫: {len(exam_notes)}\n\n"
        f"–Ø –±—É–¥—É –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏, –∞ —Ç—ã –Ω–∞–ø–∏—à–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∫ –Ω–µ–π.\n"
        f"–í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –º–æ–∂–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —ç–∫–∑–∞–º–µ–Ω.",
        reply_markup=create_stop_exam_keyboard()
    )
    
    await show_next_exam_question(call.message, state)
    await state.set_state(ExamStates.in_exam)


async def show_next_exam_question(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ —ç–∫–∑–∞–º–µ–Ω–∞."""
    data = await state.get_data()
    exam_notes = data.get('exam_notes', [])
    current_index = data.get('current_note_index', 0)
    
    if current_index >= len(exam_notes):
        # –≠–∫–∑–∞–º–µ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω
        await finish_exam(message, state)
        return
    
    current_note = exam_notes[current_index]

    await asyncio.sleep(0,8)
    await message.answer(
        f"–ö–∞—Ä—Ç–æ—á–∫–∞ {current_index + 1}/{len(exam_notes)}\n\n"
        f"{current_note.get('content_text', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n\n"
        f"–ù–∞–ø–∏—à–∏ –æ–ø–∏—Å–∞–Ω–∏–µ —ç—Ç–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏:",
        reply_markup=create_stop_exam_keyboard()
    )


@exam_router.message(ExamStates.in_exam, F.text == "‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —ç–∫–∑–∞–º–µ–Ω")
async def stop_exam(message: Message, state: FSMContext):
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —ç–∫–∑–∞–º–µ–Ω–∞ –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    data = await state.get_data()
    current_index = data.get('current_note_index', 0)
    total_notes = len(data.get('exam_notes', []))
    
    await message.answer(
        f"‚èπ –≠–∫–∑–∞–º–µ–Ω –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\n"
        f"–ü—Ä–æ–π–¥–µ–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫: {current_index}/{total_notes}",
        reply_markup=main_mem_kb()
    )
    await state.clear()


@exam_router.message(ExamStates.in_exam)
async def check_exam_answer(message: Message, state: FSMContext):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    data = await state.get_data()
    exam_notes = data.get('exam_notes', [])
    current_index = data.get('current_note_index', 0)
    correct_answers = data.get('correct_answers', 0)
    wrong_answers = data.get('wrong_answers', 0)
    wrong_notes = data.get('wrong_notes', [])
    
    if current_index >= len(exam_notes):
        return
    
    current_note = exam_notes[current_index]
    user_answer = message.text.strip().lower()
    correct_description = (current_note.get('description') or '').strip().lower()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
    is_correct = user_answer == correct_description
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    if is_correct:
        correct_answers += 1
        await update_note_stats(current_note['id'], correct=True)
        await message.answer("‚úÖ –í–µ—Ä–Ω–æ!")
    else:
        wrong_answers += 1
        wrong_notes.append(current_note)
        await update_note_stats(current_note['id'], correct=False)
        await message.answer("‚ùå –ù–µ –≤–µ—Ä–Ω–æ!")

    await asyncio.sleep(0,8)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É (–ù–ï –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É)
    current_index += 1
    await state.update_data(
        current_note_index=current_index,
        correct_answers=correct_answers,
        wrong_answers=wrong_answers,
        wrong_notes=wrong_notes
    )
    
    await show_next_exam_question(message, state)


async def finish_exam(message: Message, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —ç–∫–∑–∞–º–µ–Ω–∞ –∏ –ø–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."""
    data = await state.get_data()
    correct_answers = data.get('correct_answers', 0)
    wrong_answers = data.get('wrong_answers', 0)
    wrong_notes = data.get('wrong_notes', [])
    total_notes = len(data.get('exam_notes', []))
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    success_rate = (correct_answers / total_notes * 100) if total_notes > 0 else 0
    
    result_text = (
        f"üéâ –≠–∫–∑–∞–º–µ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
        f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n"
        f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct_answers}\n"
        f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {wrong_answers}\n"
        f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%"
    )
    
    await message.answer(result_text, reply_markup=main_mem_kb())

    await asyncio.sleep(0,8)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–µ —É–≥–∞–¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–ø–æ–∫–∞–∑–∞—Ç—å"
    if wrong_notes:
        await message.answer("üìù –ö–∞—Ä—Ç–æ—á–∫–∏, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã –æ—à–∏–±–ª–∏—Å—å:")
        
        for note in wrong_notes:
            # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã
            note_title = note.get('content_text', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            if len(note_title) > 50:
                note_title = note_title[:50] + "..."
                
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
            from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
            show_button = InlineKeyboardButton(
                text="üÉè –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É", 
                callback_data=f"show_wrong_note_{note['id']}"
            )
            keyboard = InlineKeyboardMarkup(inline_keyboard=[[show_button]])
            
            await message.answer(
                f"‚ùå {note_title}",
                reply_markup=keyboard
            )
    
    await state.clear()


@exam_router.callback_query(F.data.startswith('show_wrong_note_'))
async def show_wrong_note(call: CallbackQuery):
    """–ü–æ–∫–∞–∑ –ø–æ–ª–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—à–∏–±–æ–∫."""
    note_id = int(call.data.replace('show_wrong_note_', ''))
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –∏–∑ –±–∞–∑—ã
    note = await get_note_by_id(note_id)
    
    if not note:
        await call.answer("‚ùå –ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–∞—Ä—Ç–æ—á–∫–∏
    full_card_text = (
        f"üìö –ö–∞—Ä—Ç–æ—á–∫–∞ –∏–∑ –æ—à–∏–±–æ–∫:\n\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {note.get('category_name', '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')}\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {note.get('content_text', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {note.get('description', '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É
    await send_message_user(
        bot=bot,
        content_type=note.get('content_type'),
        content_text=full_card_text,
        user_id=call.from_user.id,
        file_id=note.get('file_id')
    )
    
    await call.answer()    