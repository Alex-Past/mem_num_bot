from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from data_base.dao import get_notes_count, get_random_note
from keyboards.note_kb import main_note_kb
from keyboards.mem_kb import create_random_card_keyboard, main_mem_kb
from create_bot import bot
from utils_bot.utils import send_message_user

random_card_router = Router()


@random_card_router.message(F.text == 'üé≤ –°–ª—É—á–∞–π–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞')
async def show_random_card(message: Message, state: FSMContext):
    await state.clear()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–º–µ—Ç–∫–∏
    notes_count = await get_notes_count(user_id=message.from_user.id)
    
    if notes_count == 0:
        await message.answer(
            "üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –∑–∞–º–µ—Ç–∫—É!",
            reply_markup=main_note_kb()
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∑–∞–º–µ—Ç–∫—É
    random_note = await get_random_note(user_id=message.from_user.id)
    
    if not random_note:
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –∑–∞–º–µ—Ç–∫—É",
            reply_markup=main_note_kb()
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ –∫–Ω–æ–ø–∫–µ
    await state.update_data(random_note=random_note)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤ —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ)
    preview_text = random_note.get('content_text') or "–ó–∞–º–µ—Ç–∫–∞ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞"
    if len(preview_text) > 100:
        preview_text = preview_text[:100] + "..."
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–≤—å—é —Å –∫–Ω–æ–ø–∫–æ–π
    await message.answer(
        f"üé≤ –°–ª—É—á–∞–π–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞\n\n"
        # f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {random_note['category_name']}\n"
        f"–¢–µ–∫—Å—Ç: {preview_text}",
        reply_markup=create_random_card_keyboard()
    )


@random_card_router.callback_query(F.data == 'show_full_random_note')
async def show_full_random_note(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    random_note = data.get('random_note')
    
    if not random_note:
        await call.answer("‚ùå –î–∞–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏
    text = (f"üé≤ –°–ª—É—á–∞–π–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞\n\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {random_note['category_name']}\n"
            f"–¢–µ–∫—Å—Ç:\n{random_note['content_text'] or '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ:\n{random_note['description'] or '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—É—é –≤–µ—Ä—Å–∏—é
    await send_message_user(
        bot=bot,
        content_type=random_note['content_type'],
        content_text=text,
        user_id=call.from_user.id,
        file_id=random_note['file_id'],
        kb=main_mem_kb()
    )
    
    await call.message.delete()
    await state.clear()


# @random_card_router.callback_query(F.data == 'another_random_card')
# async def show_another_random_card(call: CallbackQuery, state: FSMContext):
#     await call.message.delete()
#     await show_random_card(call.message, state)