from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery

from data_base.dao import (delete_note_by_id,
                           update_desc_note,
                           update_text_note,
                           update_file_note)
from keyboards.note_kb import main_note_kb
from keyboards.other_kb import stop_fsm
from utils_bot.utils import get_content_info  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞

upd_note_router = Router()


class UPDNoteStates(StatesGroup):
    content_text = State()
    description_text = State()
    file = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ñ–∞–π–ª–∞


@upd_note_router.callback_query(F.data.startswith('edit_note_text_'))
async def edit_note_text_process(call: CallbackQuery, state: FSMContext):
    await state.clear()
    note_id = int(call.data.replace('edit_note_text_', ''))
    await call.answer(f'‚úçÔ∏è –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏')
    await state.update_data(note_id=note_id)
    await call.message.answer(
        f'–û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ üëá',
        reply_markup=stop_fsm()
    )
    await state.set_state(UPDNoteStates.content_text)


@upd_note_router.message(F.text, UPDNoteStates.content_text)
async def confirm_edit_note_text(message: Message, state: FSMContext):
    note_data = await state.get_data()
    note_id = note_data.get('note_id')
    content_text = message.text.strip()
    await update_text_note(note_id=note_id, content_text=content_text)
    await state.clear()
    await message.answer(
        f'–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å ID {note_id} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ "{content_text}"!',
        reply_markup=main_note_kb()
    )


@upd_note_router.callback_query(F.data.startswith('edit_desc_text_'))
async def edit_note_desc_process(call: CallbackQuery, state: FSMContext):
    await state.clear()
    note_id = int(call.data.replace('edit_desc_text_', ''))
    await call.answer(f'‚úçÔ∏è –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏')
    await state.update_data(note_id=note_id)
    await call.message.answer(
        f'–û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ üëá',
        reply_markup=stop_fsm()
    )
    await state.set_state(UPDNoteStates.description_text)


@upd_note_router.message(F.text, UPDNoteStates.description_text)
async def confirm_edit_desc_text(message: Message, state: FSMContext):
    note_data = await state.get_data()
    note_id = note_data.get('note_id')
    description = message.text.strip()
    await update_desc_note(note_id=note_id, description=description)
    await state.clear()
    await message.answer(
        f'–û–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å ID {note_id} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ "{description}"!',
        reply_markup=main_note_kb()
    )


# –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
@upd_note_router.callback_query(F.data.startswith('edit_file_'))
async def edit_note_file_process(call: CallbackQuery, state: FSMContext):
    await state.clear()
    note_id = int(call.data.replace('edit_file_', ''))
    await call.answer(f'‚úçÔ∏è –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –∫–∞—Ä—Ç–æ—á–∫–∏')
    await state.update_data(note_id=note_id)
    await call.message.answer(
        f'–û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è —ç—Ç–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ üëá\n\n'
        f'–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:\n'
        f'‚Ä¢ –§–æ—Ç–æ\n‚Ä¢ –í–∏–¥–µ–æ\n‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç\n‚Ä¢ –ê—É–¥–∏–æ\n‚Ä¢ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'
        f'(–ø–æ–¥–ø–∏—Å—å –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è)',
        reply_markup=stop_fsm()
    )
    await state.set_state(UPDNoteStates.file)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
@upd_note_router.message(UPDNoteStates.file)
async def confirm_edit_note_file(message: Message, state: FSMContext):
    note_data = await state.get_data()
    note_id = note_data.get('note_id')
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    content_info = get_content_info(message)
    
    if content_info.get('content_type') and content_info.get('file_id'):
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await update_file_note(
            note_id=note_id,
            content_type=content_info['content_type'],
            file_id=content_info['file_id']
        )
        
        await state.clear()
        await message.answer(
            f'–§–∞–π–ª –∫–∞—Ä—Ç–æ—á–∫–∏ —Å ID {note_id} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!',
            reply_markup=main_note_kb()
        )
    else:
        await message.answer(
            '‚ùå –Ø –Ω–µ –∑–Ω–∞—é –∫–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ç–∞–∫–∏–º —Ñ–∞–π–ª–æ–º. '
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –¥–æ–∫—É–º–µ–Ω—Ç,'
            ' –∞—É–¥–∏–æ –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.',
            reply_markup=stop_fsm()
        )


@upd_note_router.callback_query(F.data.startswith('dell_note_'))
async def dell_note_process(call: CallbackQuery, state: FSMContext):
    await state.clear()
    note_id = int(call.data.replace('dell_note_', ''))
    await delete_note_by_id(note_id=note_id)
    await call.answer(f'–ö–∞—Ä—Ç–æ—á–∫–∞ —É–¥–∞–ª–µ–Ω–∞!', show_alert=True)
    await call.message.delete()