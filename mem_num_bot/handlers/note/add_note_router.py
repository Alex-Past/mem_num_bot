from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery

from create_bot import bot
from data_base.dao import add_note, get_all_categories, get_category_by_id
from keyboards.note_kb import (main_note_kb,
                               add_note_check,
                               generate_category_keyboard,
                               main_category_kb)
from keyboards.other_kb import stop_fsm
from utils_bot.utils import get_content_info, send_message_user


add_note_router = Router()


class AddNoteStates(StatesGroup):
    content = State()
    description = State()
    check_state = State()


@add_note_router.message(F.text == "‚úèÔ∏è –ö–∞—Ä—Ç–æ—á–∫–∏")
async def start_note(message: Message, state: FSMContext):
    await state.clear()
    await message.answer('–¢—ã –º–æ–∂–µ—à—å —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –Ω–∞–ø–æ–ª–Ω—è—Ç—å –∏—Ö –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏ '
                         '—Å –ª—é–±—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º: —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –∞—É–¥–∏–æ –∏–ª–∏ —Ñ–∞–π–ª—ã.',
                         reply_markup=main_note_kb())


@add_note_router.message(F.text == "üìù –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É")
async def category_views_noti(message: Message, state: FSMContext):
    await state.clear()
    all_category = await get_all_categories(user_id=message.from_user.id)
    await message.answer(
        '‚≠êÔ∏è –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –ø–æ–º–æ—â—å—é –º–µ–Ω—é',
        reply_markup=main_category_kb()
    )
    if all_category:
        await message.answer(
            '–∏–ª–∏ –≤—ã–±–µ—Ä–µ—Ç–µ –∏–∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö:',
            reply_markup=generate_category_keyboard(all_category)
        )
    else:
        await message.answer(
            '–£ –≤–∞—Å –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –î–æ–±–∞–≤—å—Ç–µ –µ–µüëá!',
            reply_markup=main_category_kb()
        )


@add_note_router.callback_query(F.data.startswith('category_id_'))
async def start_add_note(call: CallbackQuery, state: FSMContext):
    category_id = int(call.data.replace('category_id_', ''))
    await state.update_data(category_id=category_id)
    category = await get_category_by_id(category_id)
    category_name = category['category_name']
    await call.message.answer(
        f'–î–æ–±–∞–≤—å—Ç–µ –∫–∞—Ä—Ç–æ—á–∫—É –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "{category_name}"\n'
        '–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:\n'
        '‚Ä¢ –§–æ—Ç–æ\n‚Ä¢ –í–∏–¥–µ–æ\n‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç\n‚Ä¢ –ê—É–¥–∏–æ\n‚Ä¢ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
        reply_markup=stop_fsm()
    )
    await state.set_state(AddNoteStates.content)


@add_note_router.message(AddNoteStates.description)
async def handle_note_description(message: Message, state: FSMContext):
    description = message.text if message.text else ""
    await state.update_data(description=description)        
    data = await state.get_data()
    cat_id = data.get('category_id')
    category = await get_category_by_id(cat_id)
    content_info = {
        'content_type': data.get('content_type'),
        'content_text': data.get('content_text'),
        'file_id': data.get('file_id')
    }    
    text = (f"–ù–æ–≤–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ üìö\n\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è ‚≠êÔ∏è <u>{category['category_name']}</u>\n"
            "–ù–∞–∑–≤–∞–Ω–∏–µ:\n"
            f"<b>{content_info['content_text'] if content_info['content_text'] else '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}</b>\n\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ:\n"
            f"<b>{description if description else '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}</b>\n\n"
            f"–í—Å–µ –ª–∏ –≤–µ—Ä–Ω–æüí°")
    
    await send_message_user(
        bot=bot,
        content_type=content_info['content_type'],
        content_text=text,
        user_id=message.from_user.id,
        file_id=content_info['file_id'],
        kb=add_note_check()
    )
    await state.set_state(AddNoteStates.check_state)


@add_note_router.message(AddNoteStates.content)
async def handle_user_note_message(message: Message, state: FSMContext):
    data = await state.get_data()
    cat_id = data.get('category_id')
    # category = await get_category_by_id(cat_id)
    content_info = get_content_info(message)
    
    if content_info.get('content_type'):
        await state.update_data(**content_info)                
        await message.answer(
            "üìù –¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫ –∫–∞—Ä—Ç–æ—á–∫–µ "
            "(–±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —ç–∫–∑–∞–º–µ–Ω–µ):",
            reply_markup=stop_fsm()
        )
        await state.set_state(AddNoteStates.description)        
    else:
        await message.answer(
            '–Ø –Ω–µ –∑–Ω–∞—é –∫–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ç–∞–∫–∏–º –º–µ–¥–∞—Ñ–∞–π–ª–æ–º. –ù—É–∂–Ω–æ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ.'
        )
        await state.set_state(AddNoteStates.content)


@add_note_router.message(AddNoteStates.check_state, F.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")
async def cancel_add_note(message: Message, state: FSMContext):
    await message.answer(
        '–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ!',
        reply_markup=main_note_kb()
    )
    await state.clear()


@add_note_router.message(AddNoteStates.check_state, F.text == "‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ")
async def confirm_add_note(message: Message, state: FSMContext):
    note = await state.get_data()
    cat_id = int(note.get('category_id'))  
    
    await add_note(
        user_id=message.from_user.id,
        category_id=cat_id,
        content_type=note.get('content_type'),
        content_text=note.get('content_text'),
        file_id=note.get('file_id'),
        description=note.get('description', '')
    )
    await message.answer('–ö–∞—Ä—Ç–æ—á–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!', reply_markup=main_note_kb())
    await state.clear()
