from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from create_bot import bot, notification_manager
from keyboards.notifications_kb import create_notifications_keyboard, create_time_selection_keyboard
from keyboards.mem_kb import main_mem_kb

notifications_router = Router()


class NotificationStates(StatesGroup):
    choosing_time = State()


@notifications_router.message(F.text == 'üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')
async def notifications_settings(message: Message, state: FSMContext):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    await state.clear()
    
    user_id = message.from_user.id
    is_active = notification_manager.is_user_active(user_id)
    notification_time = notification_manager.get_user_notification_time(user_id)
    
    await message.answer(
        f"üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n\n"
        f"–°—Ç–∞—Ç—É—Å: {'üîî –í–∫–ª—é—á–µ–Ω—ã' if is_active else 'üîï –í—ã–∫–ª—é—á–µ–Ω—ã'}\n"
        f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {notification_time}\n\n"
        f"–í—ã –º–æ–∂–µ—Ç–µ –≤–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–ª–æ–∂–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–∫–∞—Ö –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∏—Ö –ø–æ–ª—É—á–µ–Ω–∏—è:",
        reply_markup=create_notifications_keyboard(is_active)
    )


@notifications_router.callback_query(F.data == 'toggle_difficult_notes_notifications')
async def toggle_difficult_notes_notifications(call: CallbackQuery):
    """–í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å–ª–æ–∂–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–∫–∞—Ö."""
    user_id = call.from_user.id
    
    if notification_manager.is_user_active(user_id):
        notification_manager.remove_user(user_id)
        await call.answer("üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–ª–æ–∂–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–∫–∞—Ö –≤—ã–∫–ª—é—á–µ–Ω—ã")
    else:
        notification_manager.add_user(user_id)
        await call.answer("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–ª–æ–∂–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–∫–∞—Ö –≤–∫–ª—é—á–µ–Ω—ã")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    is_active = notification_manager.is_user_active(user_id)
    notification_time = notification_manager.get_user_notification_time(user_id)
    
    await call.message.edit_text(
        f"üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n\n"
        f"–°—Ç–∞—Ç—É—Å: {'üîî –í–∫–ª—é—á–µ–Ω—ã' if is_active else 'üîï –í—ã–∫–ª—é—á–µ–Ω—ã'}\n"
        f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {notification_time}\n\n"
        f"–í—ã –º–æ–∂–µ—Ç–µ –≤–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–ª–æ–∂–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–∫–∞—Ö –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∏—Ö –ø–æ–ª—É—á–µ–Ω–∏—è:",
        reply_markup=create_notifications_keyboard(is_active)
    )


@notifications_router.callback_query(F.data == 'set_notification_time')
async def set_notification_time(call: CallbackQuery, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    await call.message.answer(
        "‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:",
        reply_markup=create_time_selection_keyboard()
    )
    await state.set_state(NotificationStates.choosing_time)


@notifications_router.callback_query(NotificationStates.choosing_time, F.data.startswith('time_'))
async def process_time_selection(call: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏."""
    time_str = call.data.replace('time_', '')
    user_id = call.from_user.id
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    notification_manager.set_user_notification_time(user_id, time_str)
    
    # –í–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏ –≤—ã–∫–ª—é—á–µ–Ω—ã
    if not notification_manager.is_user_active(user_id):
        notification_manager.add_user(user_id)
    
    await call.message.edit_text(
        f"‚úÖ –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {time_str}\n\n"
        f"–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–ª–æ–∂–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–∫–∞—Ö –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ —ç—Ç–æ –≤—Ä–µ–º—è.",
        reply_markup=create_notifications_keyboard(True)
    )
    await state.clear()


@notifications_router.callback_query(F.data == 'notifications_back')
async def notifications_back(call: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    await call.message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=main_mem_kb()
    )
    await call.message.delete()
    await state.clear()